#!/usr/bin/env python3
import sys,os
import numpy as np
import matplotlib
matplotlib.use('Agg')
from pathlib import Path
import matplotlib.pyplot as plt
import h5py
sys.path.append(os.environ['RAPTOR']+'/python/plotting')
import rapplot

font = {'family' : 'normal',
        'size'   : 16}

matplotlib.rc('font', **font)

#constants
MSUN = 1.989e33
KPC  = 3.086e21


#passed to command line
parfile = sys.argv[1]
ind = int(sys.argv[2])

#user should change these...
with open(parfile) as f:
    params = dict(x.rstrip().split(None, 1) for x in f)
for elem in params:
    params[elem]=float(params[elem].split()[-1])

#need to know the data_ids
data_id = rapplot.read_data_id("output",ind)

#Computing relevant constants

M  = params['MBH'] * MSUN
d = params['DISTANCE'] * KPC
halfrange=params['CAM_SIZE_X']/2 #Field of view in Rg

rg = (rapplot.G*M/rapplot.SPEED_OF_LIGHT**2.)
mas = (rg/d)* rapplot.MAS_IN_DEG
Tunit =rg/rapplot.SPEED_OF_LIGHT


#read data
min,max,image = rapplot.read_data("output",ind,data_id)
min.append(1);min.append(1);min.append(1);min.append(1)
max.append(1);max.append(1);max.append(1);max.append(1)

#plot data
plt.figure(figsize=(6,10),dpi=600,facecolor='w')
fig, axs = plt.subplots(3,2,figsize=(10,11))

stokes_ind=0 #we want stokes I

rapplot.plot_data_stokes(image,min,max,stokes_ind,data_id,fig,axs[0][0],halfrange,mas,label="Stokes $I^{1/2}$",cmap="afmhot")

rapplot.plot_data_stokes(image,min,max,1,data_id,fig,axs[1][0],halfrange,mas,label="Stokes Q",cmap="RdBu")

rapplot.plot_data_stokes(image,min,max,2,data_id,fig,axs[0][1],halfrange,mas,label="Stokes U",cmap="RdBu")

rapplot.plot_data_stokes(image,min,max,3,data_id,fig,axs[1][1],halfrange,mas,label="Stokes V",cmap="RdBu")

rapplot.plot_data_tau(image,data_id,6,fig,axs[2][0],halfrange,mas,label=r"$\log_{10}\tau$",cmap="RdGy_r",vmin=-2,vmax=2)

rapplot.plot_data_tau(image,data_id,7,fig,axs[2][1],halfrange,mas,label=r"$\log_{10}\tau_{\rm F}$",cmap="spring",vmin=-1,vmax=5)

fig.suptitle('t=%.01lf [s]'%(ind*10.*Tunit),fontsize=20)

#axs[0][0].set_xlabel(r"x [mas]")
axs[0][0].set_ylabel(r"y [mas]")

axs[0][0].set_xlim(-0.1,0.1)
axs[0][0].set_ylim(-0.1,0.1)

#axs[1][0].set_xlabel(r"x [mas]")
axs[1][0].set_ylabel(r"y [mas]")

axs[1][0].set_xlim(-0.1,0.1)
axs[1][0].set_ylim(-0.1,0.1)

#axs[0][1].set_xlabel(r"x [mas]")
#axs[0][1].set_ylabel(r"y [mas]")

axs[0][1].set_xlim(-0.1,0.1)
axs[0][1].set_ylim(-0.1,0.1)

#axs[1][1].set_xlabel(r"x [mas]")
#axs[1][1].set_ylabel(r"y [mas]")

axs[2][0].set_xlabel(r"x [mas]")
axs[2][0].set_ylabel(r"y [mas]")

axs[2][1].set_xlabel(r"x [mas]")


axs[1][1].set_xlim(-0.1,0.1)
axs[1][1].set_ylim(-0.1,0.1)

plt.tight_layout()
Path("figures/").mkdir(parents=True, exist_ok=True)
print("figures/"+"img_%d.png"%ind)
plt.savefig("figures/img_%d.png"%ind, transparent=False,dpi=250)
plt.clf()

image.close()
